@using AWC.Domain.Entities
@model AWC.WebUI.Models.DemographicInfoViewModel

@{
    ViewBag.Title = string.Format("Partner Info for {0} {1}", Model.ClientFirstName, Model.ClientLastName);
}

<h2>Edit Record for <em>@Model.ClientFirstName @Model.ClientLastName</em></h2>

@{Html.RenderPartial("SubNavigation", Model.ClientId);}

<article>
@using (Html.BeginForm())
{

    @Html.EditorFor(model => model.ClientId)
    @Html.EditorFor(model => model.CaseworkerId)
    @Html.EditorFor(model => model.TotalAdults)
    @Html.EditorFor(model => model.ClientFirstName)
    @Html.EditorFor(model => model.ClientLastName)
    
    @Html.ValidationSummary()
    
    <div class="block">
        <h3>Caseworker Info</h3>
    
        <div class="field-block">
            @Html.LabelFor(model => model.PartneringOrganization)
            @Html.EditorFor(model => model.PartneringOrganization)
        </div>
    
        <div class="field-block">
            @Html.LabelFor(model => model.Department)
            @Html.EditorFor(model => model.Department)
        </div>
    
        <div class="field-block">
            @Html.LabelFor(model => model.CaseworkerName)
            @Html.EditorFor(model => model.CaseworkerName)
        </div>
    
        <div class="field-block">
            @Html.LabelFor(model => model.CaseworkerPhoneNumber)
            @Html.TextBoxFor(model => model.CaseworkerPhoneNumber, new {@class="phone"})
        </div>
    
        <div class="field-block">
            @Html.LabelFor(model => model.CaseworkerEmailAddress)
            @Html.EditorFor(model => model.CaseworkerEmailAddress)
        </div>
    
    </div>
    
    <div class="block">
        <h3>Income</h3>

        <p>Must be filled out for each of the <span style="text-decoration: underline;font-weight: bold;">@Model.TotalAdults</span> adult residents specified on the @Html.ActionLink("Basic Info", "BasicInfo") page.</p>
    
        <table class="incomes">
            <tr>
                <th>Head Of Household</th>
                <th>Resident Name</th>
                <th>Relationship</th>
                <th>Monthly Income</th>
                <th>Source of Income</th>
            </tr>
            @{
                int totalIncomeLines = 0;
                if (Model.ResidentIncomes != null && Model.ResidentIncomes.Count > 0)
                {
                    foreach (var residentIncome in Model.ResidentIncomes)
                    {
                        Html.RenderPartial("EditResidentIncome", residentIncome);
                        totalIncomeLines++;
                    }
                }

                if (totalIncomeLines < Model.TotalAdults)
                {
                    for (int i = totalIncomeLines; i < Model.TotalAdults; i++)
                    {
                        Html.RenderPartial("EditResidentIncome", new ResidentIncome());
                    }
                }
            }
            <tr>
                <td colspan="3" style="text-align: right;">Total Yearly Household Income:</td>
                <td id="totalIncome">$0</td>
                <td>&nbsp;</td>
            </tr>
        </table>
        
    </div>
    
    <div class="block">
        <h3>Demographics</h3>
        
        <div class="field-block">
            @Html.LabelFor(model => model.IsReplacingFurniture)
            <div class="list">
                @Html.EditorFor(model => model.IsReplacingFurniture)
            </div>
        </div>

        <div class="field-block">
            @Html.LabelFor(model => model.FiledFederalIncomeTax)
            <div class="list">
                @Html.EditorFor(model => model.FiledFederalIncomeTax)
            </div>
        </div>

        <div class="field-block">
            <label>Please check ALL boxes that correspond to the client's ethnicity:</label><br/>
            
            <div class="list">
                @{
                    var ethnicities = (ViewData["Ethnicities"] != null) ? ViewData["Ethnicities"] as List<Ethnicity> : new List<Ethnicity>();
                }
                @foreach (var ethnicity in ethnicities)
                {
                    string isChecked = (Model.Ethnicities.Contains(ethnicity.EthnicityId)) ? "checked=checked" : "";
                    <input type="checkbox" @isChecked name="Ethnicities" value="@ethnicity.EthnicityId"/>@ethnicity.Name<br/>
                }
            </div>
        </div>
        
        <div class="field-block">
            <label>Please select the box that corresponds to the client's age:</label><br/>
            
            <div class="list">
                @{
                    var ageRanges = new List<string>
                                        {
                                            "18-25",
                                            "26-35",
                                            "36-45",
                                            "46-55",
                                            "56-61",
                                            "62 and over"
                                        };
                    
                }
                @foreach(var ageRange in ageRanges)
                {
                    string isChecked = (Model.AgeRange == ageRange) ? "checked" : "";
                    <input type="radio" name="AgeRange" value="@ageRange" @isChecked />@ageRange<br/>
                }
            </div>
        </div>
        
        <div class="field-block">
            @Html.LabelFor(model => model.HasDisability)
            <div class="list">
                @Html.EditorFor(model => model.HasDisability)
            </div>
        </div>

    </div>

    <input type="submit" value="Save Changes" class="button" />
    @Html.ActionLink("Cancel", "BasicInfo", new { id = Model.ClientId })
}
</article>
<aside class="notes">
    @{Html.RenderAction("AppointmentQuickView", new { id = Model.ClientId });} <br />
    @{Html.RenderAction("ClientNotes", new { clientId = Model.ClientId, refAction = "DemographicInfo" });}
</aside>